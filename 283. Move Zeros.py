"""
Given an integer array nums, move all 0's to the end of it while maintaining the relative order of the non-zero elements.

Note that you must do this in-place without making a copy of the array.
---------------
Дан массив из чисел, передвинь все нули в конец массива, сохраняя порядок оставшихся чисел.

Заметь, что ты должен сделать это на месте без копирования массива
---------------
EASY
"""
from typing import List


class Solution:
    def moveZeroes(self, nums: List[int]) -> None:
        """
        Do not return anything, modify nums in-place instead.
        """
        # Указатель на последний найденный ноль
        last_zero = 0
        for i in range(len(nums)):
            if nums[i] != 0:
                nums[last_zero], nums[i] = nums[i], nums[last_zero]
                last_zero += 1


"""
Идея решения:

    Используем указатель last_zero, который будет отслеживать позицию последнего перемещенного ненулевого элемента. 
    Изначально он указывает на начало массива.
    Проходим по массиву. Каждый раз, когда встречаем ненулевой элемент, 
    меняем его местами с элементом, на который указывает last_zero. После этого увеличиваем last_zero.

Как это работает:

    Если текущий элемент ненулевой, мы меняем его местами с элементом, на который указывает last_zero. 
    Таким образом, мы переносим все ненулевые элементы в начало массива.
    После перемещения ненулевого элемента мы увеличиваем указатель last_zero, 
    чтобы он указывал на следующую позицию для потенциальной замены.

Пояснения:

    Указатель last_zero: Изначально указывает на начало массива. 
    Он отслеживает позицию, куда мы должны переместить следующий ненулевой элемент.
    Перебор элементов: Проходим по массиву с помощью цикла for.
    Проверка на ненулевой элемент: Если текущий элемент ненулевой (if nums[i] != 0), 
    меняем его местами с элементом, на который указывает last_zero. Это гарантирует, 
    что все ненулевые элементы будут перемещены в начало массива в их исходном порядке.
    Увеличение last_zero: После перемещения ненулевого элемента увеличиваем указатель last_zero на 1, 
    чтобы он указывал на следующую позицию для потенциальной замены.
    
"""

nums = [0,1,0,3,12]
sol = Solution()
sol.moveZeroes(nums)
print(nums)
assert nums == [1,3,12,0,0]

nums = [0]
sol = Solution()
sol.moveZeroes(nums)
print(nums)
assert nums == [0]


