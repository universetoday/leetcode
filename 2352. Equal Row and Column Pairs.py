"""
Given a 0-indexed n x n integer matrix grid,
return the number of pairs (ri, cj) such that row ri and column cj are equal.

A row and column pair is considered equal
if they contain the same elements in the same order (i.e., an equal array).
------------------------
Дана 0-индексная матрица n x n целых чисел grid,
верните количество пар (ri, cj), для которых строка ri и столбец cj равны.

Пара строки и столбца считается равной,
если они содержат одинаковые элементы в том же порядке (т.е. равный массив).
------------------------
MEDIUM
"""
from typing import List


class Solution:
    def equalPairs(self, grid: List[List[int]]) -> int:
        hash_row = {}
        for i in range(len(grid)):
            row = [grid[i][j] for j in range(len(grid))]
            hash_row[i] = row
            # print(row)
        # print(hash_row)
        hash_col = {}
        for i in range(len(grid)):
            col = [grid[j][i] for j in range(len(grid))]
            hash_col[i] = col
            # print(col)
        # print(hash_col)
        count = 0
        for value_row in hash_row.values():
            for value_col in hash_col.values():
                if value_row == value_col:
                    count += 1
        return count


"""
Этот код реализует функцию equalPairs, которая принимает на вход квадратную матрицу grid 
и подсчитывает количество пар (строка, столбец), где строка и столбец полностью совпадают 
(то есть содержат одинаковые элементы в одинаковом порядке).
Пошаговое объяснение:

    Создание словаря для строк (hash_row):
        Сначала создается пустой словарь hash_row.
        Цикл for проходит по каждой строке матрицы grid. 
        Для каждой строки создается список элементов этой строки.
        Этот список сохраняется в словаре hash_row, где ключом является индекс строки, 
        а значением — сама строка в виде списка.
        Например, если строка содержит [1, 2, 3], 
        то она будет сохранена как {0: [1, 2, 3]} для строки с индексом 0.

    Создание словаря для столбцов (hash_col):
        Аналогично, создается словарь hash_col, но теперь цикл for проходит по каждому столбцу матрицы.
        Для каждого столбца формируется список элементов столбца.
        Этот список сохраняется в словаре hash_col, где ключом является индекс столбца, 
        а значением — сам столбец в виде списка.
        Например, если столбец содержит [1, 2, 3], 
        то он будет сохранен как {0: [1, 2, 3]} для столбца с индексом 0.

    Подсчет совпадающих пар строк и столбцов:
        Вводится переменная count для подсчета количества совпадающих пар строк и столбцов.
        Далее происходит двойной цикл for: внешний цикл проходит по всем строкам 
        (значениям словаря hash_row), а внутренний — по всем столбцам (значениям словаря hash_col).
        Внутри цикла проверяется, совпадают ли текущие строка и столбец (т.е. списки значений). 
        Если они совпадают, то count увеличивается на 1.

    Возвращение результата:
        После завершения всех проверок, функция возвращает количество совпадающих пар count.
"""

grid = [[3,2,1],[1,7,6],[2,7,7]]
sol = Solution()
res = sol.equalPairs(grid)
print(res)
assert res == 1

grid = [[3,1,2,2],[1,4,4,5],[2,4,2,2],[2,4,2,2]]
sol = Solution()
res = sol.equalPairs(grid)
print(res)
assert res == 3
