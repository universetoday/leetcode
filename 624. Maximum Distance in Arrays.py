"""
You are given m arrays, where each array is sorted in ascending order.

You can pick up two integers from two different arrays (each array picks one)
and calculate the distance. We define the distance between two integers a and b
to be their absolute difference |a - b|.

Return the maximum distance.
------------------------
Вам даны m массивов, каждый из которых отсортирован в порядке возрастания.

Вы можете выбрать два целых числа из двух разных массивов (каждый массив выбирает по одному) и
вычислить расстояние между ними. Мы определяем расстояние между двумя целыми числами a и b
как их абсолютную разницу |a - b|.

Верните максимальное расстояние.
------------------------
MEDIUM
"""
from typing import List


class Solution:
    def maxDistance(self, arrays: List[List[int]]) -> int:
        global_min = arrays[0][0]
        global_max = arrays[0][-1]
        max_dist = 0

        # Проходим по каждому массиву начиная со второго
        for i in range(1, len(arrays)):
            # Проверяем разницу между текущим массивом и глобальными значениями
            max_dist = max(max_dist, abs(arrays[i][-1] - global_min), abs(arrays[i][0] - global_max))

            # Обновляем глобальные минимум и максимум
            global_min = min(global_min, arrays[i][0])
            global_max = max(global_max, arrays[i][-1])

        return max_dist


"""
Чтобы решить задачу поиска максимального расстояния между двумя числами, 
взятыми из разных отсортированных массивов, можно воспользоваться следующим алгоритмом:
План:

    Цель: Нам нужно найти максимальное возможное расстояние между любыми двумя числами, 
    взятыми из разных массивов.

    Наблюдения:
        Поскольку массивы отсортированы, максимальная разница, скорее всего, 
        будет между наименьшим числом из одного массива и наибольшим числом из другого массива.
        Таким образом, нужно рассматривать:
            Разницу между максимальным элементом одного массива и минимальным элементом другого массива.
        Нам нужно будет сравнить такие возможные разницы для всех массивов.

    Алгоритм:
        Пройдемся по каждому массиву, чтобы найти два основных значения:
            global_min: минимальное значение среди всех массивов.
            global_max: максимальное значение среди всех массивов.
        Для каждого массива вычислим:
            Разницу между его максимальным элементом и global_min.
            Разницу между его минимальным элементом и global_max.
        Будем отслеживать максимальную разницу среди всех найденных.

    Сложность:
        Этот алгоритм работает за O(m)O(m), где mm — количество массивов, 
        так как мы проходим по каждому массиву всего один раз.

Объяснение:

    Начальная инициализация:
        global_min и global_max инициализируются первыми значениями из первого массива.
        max_dist инициализируется значением 0.

    Проход по массивам:
        Для каждого массива (начиная со второго) вычисляем разницу 
        между его максимальным значением и global_min, 
        а также между его минимальным значением и global_max. 
         разницы сравниваются с текущим max_dist, и, если они больше, обновляется max_dist.
        После проверки обновляем global_min и global_max для последующего использования.

Примеры:

    Для массивов [[1, 2, 3], [4, 5], [1, 2, 3]] максимальная разница — 4.
    Для массивов [[1], [1]] максимальная разница — 0, так как все элементы одинаковы.
    Для массивов [[1, 4], [0, 5]] максимальная разница — 4 (разница между 4 и 0).

Эта реализация исправляет ошибку и работает корректно для всех предоставленных случаев.
"""

arrays = [[1,2,3],[4,5],[1,2,3]]
sol = Solution()
res = sol.maxDistance(arrays)
print(res)
assert res == 4

arrays = [[1],[1]]
sol = Solution()
res = sol.maxDistance(arrays)
print(res)
assert res == 0

arrays = [[1,4],[0,5]]
sol = Solution()
res = sol.maxDistance(arrays)
print(res)
assert res == 4
